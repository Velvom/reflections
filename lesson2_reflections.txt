1. What happens when you initialize a repository? Why do you need to do it?
An empty repo is initialized in the directory. The .git directory gets created.
Git repos store a bunch of meta data about the history of the repo since it was created. (the .git file. Use ls -a to see it in a repo).

- To create a new repo (from a directory with files)
git init

- 'git status' shows what files have changed since the last commit.

This needs to be done if we would want to merge and branch out our changes. 

2. How is the staging area different from the working directory and the repository?
What value do you think it offers?
Staging area is an intermediate areas between working dir and the repo.
It allows us to stage the logical set of files that need to be committed in a
single commit.

- To stage
git add <file>

- To unstage file
git rm --cached lesson2_reflections.txt
git reset lesson_2_reflections.txt
git rm -f --cached lesson2_reflections.txt if changes were made after staging


3. How can you use the staging area to make sure you have one commit per logical
change?
By adding only files that are pertinent to a logical change to the staging area.

- To commit
git commit.This should bring up an editor (that was setup) for us to enter a
commit message.
- To commit with a command line commit message
git commit -m "Commit message"
- To see the commit ID
git log
Note: commit ID and change ID are different


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of GitÂ’s automatic merging vs. always doing merges
manually?
