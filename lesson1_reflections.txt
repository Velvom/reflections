GIT - Version Control System
GitHub - Code sharing and collaboration platform


To give a statistics on what files have changed in a repository
git log --stat

To see the diff between two versions of a file (eg. from different branches)
diff --git a/file.js b/file.js

To see the diff between two commits
git diff <commit id1> <commit id2>


How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    Removal/additions are indicated by + and -. 
    Removal/additions are colored in red/green. This makes the identification
    of bugs easier.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    This would give me a story of each change made to the file: when/what/who
    With this, we can easily identify bugs/errors. 

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

repo: collection of files.
Commit: snap shot of every file in a repo when a commit was made.

In Git, have one commit per a logical change (eg. fix a typo, fix a bug). 
Committing these two together is not a good idea as they are logically two
separate changes.

Manual Commit:
Pros:
   User has control over committing meaningful logical changes.
Cons:
   Unsaved changes may be lost forever.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

Git saves collection of inter-related files in a repository. Changing one file in a repo may/may not affect other files. Therefore, it makes sense to save all files that are related together. However, "Google docs" is a non-code oriented
version control system.

How can you use the commands git log and git diff to view the history of files?

Show the commits made in this repository, starting with the most recent.
git log

To give a statistics on what files have changed in a repository
git log --stat

To see what has changed in a partcular commit
git show <commit id>

Compare two commits, printing each line that is present in one commit but not the other.
git diff <commit id1> <commit id2>

Make a copy of an entire Git repository, including the history, onto your own computer.
git clone

How might using version control make you more confident to make changes that
could break something?

  1. Changes can be easily spotted and corrected/reverted if they break something.
  2. Wouldn't fear to make substantial changes to the code

  3. Can explore a large project easily and fix bugs

  HEAD is what Git calls to the commit we're currently working on.
  To check out an older commit. Note that this is not the same as
  "svn checkout". When we do this, we'll be in 'detached HEAD' state.

  Temporarily reset all files in a directory to their state at the time of a specific commit.
  git checkout <commit id>

  To get back to master,
  git checkout master

Now that you have your workspace set up, what do you want to try using Git for?
   
  Create project with multiple files.
  Edit and save them when needed.
  Explore them and find bugs.
